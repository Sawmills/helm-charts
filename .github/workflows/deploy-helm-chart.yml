name: Deploy Helm Chart (Reusable)

on:
  workflow_call:
    inputs:
      chart_path:
        description: 'Path to the Helm chart directory'
        required: true
        type: string
      chart_name:
        description: 'Name of the Helm chart'
        required: true
        type: string
      chart_repo_name:
        description: 'Name of the chart in the ECR repository'
        required: true
        type: string
      tag_prefix:
        description: 'Prefix for git tags (e.g., "collector" or "remote-operator")'
        required: true
        type: string
      default_bump_type:
        description: 'Default version bump type if no label is specified'
        required: false
        type: string
        default: 'patch'
      version_has_quotes:
        description: 'Whether the version in Chart.yaml is quoted'
        required: false
        type: boolean
        default: false
    outputs:
      tag:
        description: 'The created git tag'
        value: ${{ jobs.tag-and-version.outputs.tag }}

permissions:
  id-token: write
  contents: write
  packages: write

jobs:
  tag-and-version:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.create_tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine version bump type
        id: bump_type
        run: |
          # Get PR labels
          LABELS="${{ join(github.event.pull_request.labels.*.name, ' ') }}"
          echo "PR Labels: $LABELS"
          
          # Determine bump type based on labels
          if echo "$LABELS" | grep -q "version:major"; then
            BUMP_TYPE="major"
          elif echo "$LABELS" | grep -q "version:minor"; then
            BUMP_TYPE="minor"
          elif echo "$LABELS" | grep -q "version:patch"; then
            BUMP_TYPE="patch"
          else
            # Use provided default
            BUMP_TYPE="${{ inputs.default_bump_type }}"
            echo "⚠️ No version label found. Defaulting to ${{ inputs.default_bump_type }} bump for ${{ inputs.chart_name }}."
            echo "💡 Use labels: version:major, version:minor, or version:patch"
          fi
          
          echo "bump_type=${BUMP_TYPE}" >> $GITHUB_OUTPUT
          echo "Version bump type: ${BUMP_TYPE}"
      
      - name: Get current chart version
        id: current_version
        run: |
          if [ "${{ inputs.version_has_quotes }}" = "true" ]; then
            CURRENT_VERSION=$(grep "^version:" ${{ inputs.chart_path }}/Chart.yaml | cut -d' ' -f2 | tr -d '"')
          else
            CURRENT_VERSION=$(grep "^version:" ${{ inputs.chart_path }}/Chart.yaml | cut -d' ' -f2)
          fi
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "Current ${{ inputs.chart_name }} version: ${CURRENT_VERSION}"
      
      - name: Calculate next version
        id: get_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"
          
          # Parse version into major, minor, patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "new_tag=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "Next ${{ inputs.chart_name }} version: ${NEW_VERSION}"

      - name: Update Chart.yaml version
        run: |
          NEXT_VERSION="${{ steps.get_version.outputs.new_tag }}"
          
          echo "Updating ${{ inputs.chart_name }} Chart.yaml version to: ${NEXT_VERSION}"
          
          if [ "${{ inputs.version_has_quotes }}" = "true" ]; then
            sed -i "s/^version: .*/version: \"${NEXT_VERSION}\"/" ${{ inputs.chart_path }}/Chart.yaml
          else
            sed -i "s/^version: .*/version: ${NEXT_VERSION}/" ${{ inputs.chart_path }}/Chart.yaml
          fi
          
          echo "Updated Chart.yaml:"
          grep -E "^version:" ${{ inputs.chart_path }}/Chart.yaml

      - id: create_token
        name: Create token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ vars.SAWMILLS_REPO_APP_ID }}
          private_key: ${{ secrets.SAWMILLS_APP_PRIVATE_KEY }}

      - name: Commit Chart.yaml changes
        env:
          GIT_TOKEN: ${{ steps.create_token.outputs.token }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet ${{ inputs.chart_path }}/Chart.yaml; then
            echo "No changes to commit"
          else
            git add ${{ inputs.chart_path }}/Chart.yaml
            git commit -m "Update ${{ inputs.chart_name }} Chart.yaml version to ${{ steps.get_version.outputs.new_tag }} (${{ steps.bump_type.outputs.bump_type }} bump)"
            git push origin main
          fi
      
      - name: Create git tag
        env:
          GIT_TOKEN: ${{ steps.create_token.outputs.token }}
        id: create_tag
        run: |
          TAG="${{ inputs.tag_prefix }}-v${{ steps.get_version.outputs.new_tag }}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Creating tag: ${TAG}"
          
          git tag -a "${TAG}" -m "Release ${{ inputs.chart_name }} ${TAG} (${{ steps.bump_type.outputs.bump_type }} bump)"
          git push origin "${TAG}"

  build-helm-chart:
    needs: [tag-and-version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      - name: Authenticate with AWS and ECR
        id: aws-auth
        uses: Sawmills/actions/aws-auth@main
        with:
          aws_region: us-east-1
          aws_role: ${{ vars.AWS_ROLE }}
          ecr_account_id: ${{ vars.ECR_ACCOUNT_ID }}
      - name: Push Helm chart
        uses: Sawmills/actions/push-helm@main
        with:
          chart-path: ${{ inputs.chart_path }}
          chart-repo: public.ecr.aws/s7a5m1b4
          chart-name: ${{ inputs.chart_repo_name }}
          aws_region: ${{ vars.AWS_REGION }}
          aws_role: ${{ vars.AWS_ROLE }}
          ecr_account_id: ${{ vars.ECR_ACCOUNT_ID }}
          tag: ${{ needs.tag-and-version.outputs.tag }} 