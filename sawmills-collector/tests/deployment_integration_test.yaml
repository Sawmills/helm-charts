suite: test deployment integration with affinity
templates:
  - deployment.yaml
tests:
  - it: should work with default affinity and other pod placement settings
    values:
      - ../values.yaml
    set:
      nodeSelector:
        disktype: ssd
      tolerations[0].key: "dedicated"
      tolerations[0].operator: "Equal"
      tolerations[0].value: "sawmills"
      tolerations[0].effect: "NoSchedule"
      topologySpreadConstraints[0]: "kubernetes.io/hostname"
      topologySpreadConstraints[1]: "topology.kubernetes.io/zone"
      priorityClassName: high-priority
    asserts:
      - exists:
          path: spec.template.spec.affinity.podAntiAffinity
      - exists:
          path: spec.template.spec.nodeSelector
      - exists:
          path: spec.template.spec.tolerations
      - exists:
          path: spec.template.spec.topologySpreadConstraints
      - exists:
          path: spec.template.spec.priorityClassName
      - equal:
          path: spec.template.spec.nodeSelector.disktype
          value: ssd
      - equal:
          path: spec.template.spec.priorityClassName
          value: high-priority

  - it: should handle affinity with autoscaling enabled
    values:
      - ../values.yaml
    set:
      autoscaling:
        enabled: true
        minReplicas: 3
        maxReplicas: 10
    asserts:
      - exists:
          path: spec.template.spec.affinity.podAntiAffinity
      - notExists:
          path: spec.replicas
      - equal:
          path: spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[0].weight
          value: 100

  - it: should work with KEDA autoscaling and default affinity
    values:
      - ../values.yaml
    set:
      keda:
        enabled: true
        minReplicas: 2
        maxReplicas: 20
    asserts:
      - exists:
          path: spec.template.spec.affinity.podAntiAffinity
      - equal:
          path: spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[0].podAffinityTerm.labelSelector.matchExpressions[0].values[0]
          value: sawmills-collector-chart

  - it: should work with haproxy enabled and default affinity
    values:
      - ../values.yaml
    set:
      haproxy.enabled: true
      haproxy.mapping.http_4318.from: 4318
      haproxy.mapping.http_4318.to.port: 4318
      haproxy.mapping.http_4318.to.protocol: "TCP"
    asserts:
      - exists:
          path: spec.template.spec.affinity.podAntiAffinity
      - lengthEqual:
          path: spec.template.spec.containers
          count: 3
      - equal:
          path: spec.template.spec.containers[0].name
          value: haproxy

  - it: should work with additional containers and default affinity
    values:
      - ../values.yaml
    set:
      additionalContainers.sidecar.image: "busybox:1.35"
      additionalContainers.sidecar.command[0]: "sh"
      additionalContainers.sidecar.command[1]: "-c"
      additionalContainers.sidecar.command[2]: "echo Hello && sleep 3600"
    asserts:
      - exists:
          path: spec.template.spec.affinity.podAntiAffinity
      - lengthEqual:
          path: spec.template.spec.containers
          count: 3
      - equal:
          path: spec.template.spec.containers[0].name
          value: sidecar

  - it: should work with custom resource limits and default affinity
    values:
      - ../values.yaml
    set:
      resources:
        requests:
          memory: 1Gi
          cpu: 500m
        limits:
          memory: 4Gi
          cpu: 2000m
    asserts:
      - exists:
          path: spec.template.spec.affinity.podAntiAffinity
      - equal:
          path: spec.template.spec.containers[1].resources.requests.memory
          value: 1Gi
      - equal:
          path: spec.template.spec.containers[1].resources.limits.cpu
          value: 2000m

  - it: should work when adding node affinity alongside default pod anti-affinity
    values:
      - ../values.yaml
    set:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-type
                operator: In
                values:
                - compute
    asserts:
      - exists:
          path: spec.template.spec.affinity.nodeAffinity
      - exists:
          path: spec.template.spec.affinity.podAntiAffinity
      - equal:
          path: spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[0].matchExpressions[0].key
          value: node-type

  - it: should work with service account configuration and default affinity
    values:
      - ../values.yaml
    set:
      serviceAccount.create: true
      serviceAccount.name: "custom-service-account"
      serviceAccount.annotations."eks\.amazonaws\.com/role-arn": "arn:aws:iam::123456789012:role/custom-role"
    asserts:
      - exists:
          path: spec.template.spec.affinity.podAntiAffinity
      - equal:
          path: spec.template.spec.serviceAccountName
          value: custom-service-account

  - it: should work with custom rollout configuration and default affinity
    values:
      - ../values.yaml
    set:
      rollout.strategy: "RollingUpdate"
      rollout.rollingUpdate.maxUnavailable: 1
      rollout.rollingUpdate.maxSurge: 2
      rollout.terminationGracePeriodSeconds: 30
      rollout.minReadySeconds: 10
    asserts:
      - exists:
          path: spec.template.spec.affinity.podAntiAffinity
      - equal:
          path: spec.strategy.rollingUpdate.maxUnavailable
          value: 1
      - equal:
          path: spec.strategy.rollingUpdate.maxSurge
          value: 2
      - equal:
          path: spec.template.spec.terminationGracePeriodSeconds
          value: 30
      - equal:
          path: spec.minReadySeconds
          value: 10 